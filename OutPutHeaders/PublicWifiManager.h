/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "PublicWifiViewControllerDelegate.h"
#import "PublicWifiConnectedViewControllerDelegate.h"
#import "PublicWifiCompletePageViewControllerDelegate.h"
#import "MMKernelExt.h"
#import "MMService.h"
#import "INetworkStatusMgrExt.h"
#import "MMService.h"
#import "MMWebViewDelegate.h"
#import "APAuthDelegate.h"
#import "APCheckDelegate.h"
#import "APAccessDelegate.h"
#import "APProtalDelegate.h"
#import "PublicWifiGetA8KeyLogicDelegate.h"
#import "PublicWifiFrontInfoViewControllerDelegate.h"
#import "APCheckPwdDelegate.h"
#import "PublicWifiNetworkLogicMgrDelegate.h"
#import "PublicWifiReportLocationLogicDelegate.h"
#import "PublicWifiApInfoListViewControllerDelegate.h"
#import "APProtal33Delegate.h"
#import "PublicWifiScanListLogicDelegate.h"

@class PublicWifiReportLocationLogic, PublicWifiScanListLogic, APPortal33, APCheck, APAuth, NSString, MMWebViewController, PublicWifiCache, PublicWifiGetA8KeyLogic, APAccess, PublicWifiPCLogic, APPortal, PublicWifiNetworkLogicMgr, NSMutableDictionary, APCheckPwd, CContact;

@interface PublicWifiManager : MMService <APAuthDelegate, APCheckDelegate, APAccessDelegate, APProtalDelegate, PublicWifiGetA8KeyLogicDelegate, PublicWifiViewControllerDelegate, PublicWifiFrontInfoViewControllerDelegate, PublicWifiConnectedViewControllerDelegate, INetworkStatusMgrExt, APCheckPwdDelegate, PublicWifiNetworkLogicMgrDelegate, PublicWifiReportLocationLogicDelegate, PublicWifiApInfoListViewControllerDelegate, PublicWifiCompletePageViewControllerDelegate, APProtal33Delegate, PublicWifiScanListLogicDelegate, MMService, MMKernelExt, MMWebViewDelegate> {
	BOOL _isOnWifi;
	BOOL _isWifiChanged;
	BOOL _hasDoWifiManager;
	BOOL _isWaitingUserConfirm;
	BOOL _isOpenUrlProcessing;
	BOOL _isWaitingBindPhone;
	BOOL _isRegisterHotspotInterface;
	NSString* _currSSID;
	NSString* _currMAC;
	PublicWifiCache* _cache;
	CContact* _currContact;
	unsigned _annotationExpire;
	PublicWifiGetA8KeyLogic* _getA8KeyLogic;
	APAuth* _apAuth;
	APCheck* _apCheck;
	APAccess* _apAccess;
	APCheckPwd* _apCheckPwd;
	APPortal* _apPortal;
	APPortal33* _apPortal33;
	PublicWifiPCLogic* _publicWifiPCLogic;
	APCheckPwd* _successedPwd;
	APPortal* _successedPortal;
	PublicWifiNetworkLogicMgr* _networkLogic;
	PublicWifiReportLocationLogic* _wifiReportLogic;
	MMWebViewController* _abroadApAuthWebViewController;
	MMWebViewController* _connectWebViewControler;
	NSString* _proto4ToConnectSSID;
	NSString* _proto4ToConnectPassword;
	NSMutableDictionary* _knownProtocol3HotspotsList;
	PublicWifiScanListLogic* _scanLogic;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) PublicWifiScanListLogic* scanLogic;
@property(retain, nonatomic) NSMutableDictionary* knownProtocol3HotspotsList;
@property(retain, nonatomic) NSString* proto4ToConnectPassword;
@property(retain, nonatomic) NSString* proto4ToConnectSSID;
@property(retain, nonatomic) MMWebViewController* connectWebViewControler;
@property(retain, nonatomic) MMWebViewController* abroadApAuthWebViewController;
@property(retain, nonatomic) PublicWifiReportLocationLogic* wifiReportLogic;
@property(retain, nonatomic) PublicWifiNetworkLogicMgr* networkLogic;
@property(retain, nonatomic) APPortal* successedPortal;
@property(retain, nonatomic) APCheckPwd* successedPwd;
@property(assign, nonatomic) BOOL isRegisterHotspotInterface;
@property(assign, nonatomic) __weak PublicWifiPCLogic* publicWifiPCLogic;
@property(assign, nonatomic) BOOL isWaitingBindPhone;
@property(retain, nonatomic) APPortal33* apPortal33;
@property(retain, nonatomic) APPortal* apPortal;
@property(retain, nonatomic) APCheckPwd* apCheckPwd;
@property(retain, nonatomic) APAccess* apAccess;
@property(retain, nonatomic) APCheck* apCheck;
@property(retain, nonatomic) APAuth* apAuth;
@property(retain, nonatomic) PublicWifiGetA8KeyLogic* getA8KeyLogic;
@property(assign, nonatomic) BOOL isOpenUrlProcessing;
@property(assign, nonatomic) BOOL isWaitingUserConfirm;
@property(assign, nonatomic) unsigned annotationExpire;
@property(assign, nonatomic) BOOL hasDoWifiManager;
@property(assign, nonatomic) BOOL isWifiChanged;
@property(retain, nonatomic) CContact* currContact;
@property(assign, nonatomic) BOOL isOnWifi;
@property(retain, nonatomic) PublicWifiCache* cache;
@property(copy, nonatomic) NSString* currMAC;
@property(copy, nonatomic) NSString* currSSID;
-(void).cxx_destruct;
-(void)addHotspotToProtocol3List:(id)protocol3List macAddr:(id)addr;
-(BOOL)isHotspotValidAndInList:(id)list macAddr:(id)addr;
-(void)addHotspotToProtocol4List:(id)protocol4List :(id)arg2;
-(void)registerHotspotHelper;
-(void)delayRegisterHotspotHelper;
-(BOOL)checkWifiHotSpotList:(id)list :(id)arg2;
-(void)sendCloseEventToObserver;
-(void)didGetWifiListSuccess:(id)success;
-(void)onSendAddWiFiBrandContactResponse:(id)response;
-(void)showErrorViewControllerWithErrMsg:(id)errMsg fromViewContorller:(id)viewContorller;
-(void)showViewControllerWithApBase:(id)apBase fromViewController:(id)viewController isNeedConfirm:(BOOL)confirm;
-(void)connectToFreeWifiWithQRCode:(id)qrcode viewController:(id)controller scene:(unsigned long)scene;
-(void)onPublicWifiApInfoSelected:(id)selected;
-(BOOL)handleInnerSchemeFromViewController:(id)viewController viewController:(id)controller;
-(void)onReportLocationFailed:(unsigned)failed;
-(void)onReportLocationAndGetBizWifiInfo:(id)info;
-(void)handleLocationInfoReportWithApBase:(id)apBase;
-(BOOL)handleLocateRequestFromViewController:(id)viewController scene:(unsigned long)scene;
-(void)handle3rdAppWithUrl:(id)url;
-(void)showGuidePageAfterScanQrCodeOfApPortal;
-(void)doApPortalAfterGetA8KeyResult:(id)result viewController:(id)controller scene:(unsigned long)scene pageInfo:(id)info tid:(id)tid openid:(id)openid appid:(id)appid;
-(void)doApAuthAfterGetA8KeyResult:(id)result viewController:(id)controller scene:(unsigned long)scene pageInfo:(id)info isNeedConfirm:(BOOL)confirm;
-(void)refreshApAuthPageIfNeed;
-(BOOL)isBindAboardPhone;
-(void)handleGetA8KeyResult:(id)result withViewController:(id)viewController withScene:(unsigned long)scene;
-(void)showBindPhoneViewFromFrontPage;
-(void)setQinghuaiPageNeedFollowStateWithUserName:(id)userName;
-(void)requestAddContactWithApbase:(id)apbase;
-(BOOL)verifyCurrentSSid;
-(void)setConfirmStateToConnect:(BOOL)connect;
-(void)logout;
-(void)cleanCache;
-(id)showUrlOfCurrApAuth;
-(BOOL)shouldOpenWebview;
-(void)restartApAuth;
-(id)ssidOfApAuth;
-(int)stateOfApAuth;
-(void)userConfirm;
-(void)onPublicWifiApInfoViewContorllerWillGoBack;
-(void)wifiCompletePageViewControlerWillDone:(BOOL)wifiCompletePageViewControler;
-(void)wifiConnenctedViewControlerWillDone:(BOOL)wifiConnenctedViewControler;
-(void)frontViewControllerWillGoBack:(BOOL)frontViewController;
-(void)wifiViewControllerWillGoBack;
-(void)didQRCodeExpiredOfGetA8KeyLogic:(id)getA8KeyLogic qrCode:(id)code;
-(void)didFailOfGetA8KeyLogic:(id)getA8KeyLogic;
-(void)didSuccessOfGetA8KeyLogic:(id)getA8KeyLogic result:(id)result;
-(void)didFailedWithApCheckPwd:(id)apCheckPwd errorMsg:(id)msg;
-(void)gotoFrontPageWithApPortal:(id)apPortal;
-(void)gotoApPortalWithApCheckPwd:(id)apCheckPwd tid:(id)tid openId:(id)anId appid:(id)appid;
-(void)gotoApAuthWithApCheckPwd:(id)apCheckPwd protolType:(unsigned)type;
-(void)didSuccessOfApCheckPwd:(id)apCheckPwd;
-(void)didRunningOfApCheckPwd:(id)apCheckPwd;
-(void)didReadyWithApCheckPwd:(id)apCheckPwd protolType:(unsigned)type;
-(void)didFailOfApCheck:(id)apCheck withErrCode:(int)errCode;
-(void)didSuccessOfApCheck:(id)apCheck;
-(void)didFailOfAPPortal33:(id)apportal33 errMsg:(id)msg;
-(void)didFailOfAPPortal:(id)apportal errMsg:(id)msg;
-(void)didSuccessOfAPPortal33:(id)apportal33;
-(void)didSuccessOfAPPortal:(id)apportal;
-(void)didStartApPortal33:(id)a33;
-(void)didStartApPortal:(id)portal;
-(void)didReadyOfApPortal:(id)apPortal;
-(void)didExpiredOfApAuth:(id)apAuth;
-(void)didFailOfApAuth:(id)apAuth withErrCode:(int)errCode;
-(void)didSuccessOfApAuth:(id)apAuth;
-(void)didStartApAuth:(id)auth;
-(void)webViewReturn:(id)aReturn;
-(void)resetWaitingFlagWhenFailed;
-(id)getAbroadApAuthUrlWithSSID:(id)ssid;
-(unsigned long)getCurrentBindPhoneStatus;
-(void)setWaitBindPhoneStatus:(BOOL)status;
-(BOOL)isUserStayOnConnectingView;
-(void)readWifiSetting;
-(void)doGetA8KeyForWifiWithQRCode:(id)qrcode scene:(unsigned long)scene viewController:(id)controller;
-(void)doApAccessWithUrl:(id)url;
-(void)doWifiManage;
-(void)handleOffWifi;
-(void)onNetworkStatusChange:(unsigned long)change;
-(void)onAuthOK;
-(void)onServiceEnterBackground;
-(void)onServiceEnterForeground;
-(void)onServiceClearData;
-(void)onServiceReloadData;
-(void)onServiceInit;
-(id)init;
-(void)dealloc;
@end


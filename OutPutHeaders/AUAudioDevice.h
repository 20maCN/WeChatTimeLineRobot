/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WCAudioSessionExt.h"
#import "WeChat-Structs.h"
#import "MMService.h"
#import "MMService.h"

@class PCMAudioFile, MMTimer, NSRecursiveLock, NSString, NSObject;
@protocol AUAudioDataSource, OS_dispatch_queue;

@interface AUAudioDevice : MMService <WCAudioSessionExt, MMService> {
	struct {
		OpaqueAudioComponentInstance* ioUnit;
		AudioStreamBasicDescription inputDataFormat;
		AudioStreamBasicDescription outputDataFormat;
		id<AUAudioDataSource> recordDS;
		id<AUAudioDataSource> playDS;
		unsigned volumeFactor;
		bool isRunning;
	} mAUState;
	int mWillWorkMode;
	int mWorkMode;
	int mAudioUnitSubType;
	int mInSamplerate;
	int mInChannels;
	int mInFrameSize;
	int mOutChannels;
	int mOutSamplerate;
	int mOutFrameSize;
	char* pRecBuff;
	int mRBLeft;
	char* pPlayBuff;
	int mPBLeft;
	bool bMicrophoneMute;
	bool bSpeakerphone;
	bool bEnableProximity;
	bool bSoundCardFlag;
	NSString* mOutFromName;
	PCMAudioFile* mOutPCMFile;
	BOOL mIsNeedRestartAudioTalk;
	BOOL mIsForF2F;
	BOOL mHasiOS7UsedVoip;
	NSRecursiveLock* m_audioSessionLock;
	NSObject<OS_dispatch_queue>* m_audioSessionQueue;
	BOOL m_isForPstn;
	MMTimer* mMeterTimer;
	id<AUAudioDataSource> dataSource;
	long audioDevErrCode;
	int audioRecordingCallbackNum;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MMTimer* mMeterTimer;
@property(retain, nonatomic) NSRecursiveLock* m_audioSessionLock;
@property(assign, nonatomic) int audioRecordingCallbackNum;
@property(assign, nonatomic) long audioDevErrCode;
@property(assign, nonatomic) BOOL needRestartAudioTalk;
@property(assign, nonatomic) int workMode;
@property(assign, nonatomic) __weak id<AUAudioDataSource> dataSource;
-(id).cxx_construct;
-(void).cxx_destruct;
-(void)onWCAudioSessionOverride;
-(void)onWCAudioSessionCategoryChange:(unsigned)change;
-(void)onWCAudioSessionOldDeviceUnavailable;
-(void)onWCAudioSessionNewDeviceAvailable;
-(BOOL)isF2FMode;
-(BOOL)isVoIPPlaying;
-(BOOL)isAudioRecording;
-(BOOL)isAudioPlaying;
-(BOOL)isRunning;
-(void)ChangeToCategory:(int)category;
-(void)StopForVoIP;
-(void)StopAndNotifyUIPause;
-(void)StopAndNotifyUIStop;
-(void)Stop;
-(void)RestartTalkAndNotifyUIRestart;
-(BOOL)Restart;
-(void)StartRecordAndPlayForF2F;
-(void)StartRecordAndPlayForPSTN;
-(void)StartRecordAndPlayForVoIP;
-(BOOL)StartPlay;
-(BOOL)StartRecord;
-(void)setCaptureToFileFrom:(id)from;
-(void)UnPluginHeadset;
-(void)PluginHeadset;
-(void)disableProximity;
-(void)enableProximity;
-(void)proximityChange:(id)change;
-(void)setVolumeFactor:(unsigned long)factor;
-(BOOL)isUsingEarDevice;
-(bool)getSpeakerphone;
-(bool)getSoundCardFlag;
-(void)setSoundCardFlag:(bool)flag;
-(void)setSpeakerphone:(bool)speakerphone;
-(void)setMicrophoneMute:(bool)mute;
-(int)setPlayDataFormat:(int)format Channels:(int)channels Duration:(int)duration;
-(int)setRecDataFormat:(int)format Channels:(int)channels Duration:(int)duration;
-(void)dealloc;
-(id)init;
-(float)getVolumnMeter;
-(void)delayRestartTalk;
-(void)restartTalk;
-(void)pauseTalk;
-(void)InputMicphoneSelection:(bool)selection;
-(void)StopSession;
-(BOOL)StartSessionWithWorkMode:(int)workMode;
-(void)TimerCheckMeter;
-(void)SetOutputCallback:(OpaqueAudioComponentInstance*)callback;
-(void)SetInputCallback:(OpaqueAudioComponentInstance*)callback;
-(void)SetOutputDataFormat:(OpaqueAudioComponentInstance*)format;
-(void)SetInputDataFormat:(OpaqueAudioComponentInstance*)format;
-(void)SetDataFormat:(AudioStreamBasicDescription*)format SampleRate:(int)rate ChannelPerFrame:(int)frame;
-(void)SetOutputIOEnable:(OpaqueAudioComponentInstance*)enable enabled:(BOOL)enabled;
-(void)SetInputIOEnable:(OpaqueAudioComponentInstance*)enable enabled:(BOOL)enabled;
-(void)CloseVoiceAGC:(OpaqueAudioComponentInstance*)agc;
-(void)OpenVoiceAGC:(OpaqueAudioComponentInstance*)agc;
-(void)CloseVoiceProcess:(OpaqueAudioComponentInstance*)process;
-(void)OpenVoiceProcess:(OpaqueAudioComponentInstance*)process;
@end


/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WeChat-Structs.h"
#import "WCDataBaseEventDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSRecursiveLock, NSString, WCDataBase, WCDB, WCDataBaseTable, NSMutableSet;

@interface CMMDB : XXUnknownSuperclass <WCDataBaseEventDelegate> {
	NSRecursiveLock* m_lockMMDB;
	NSMutableSet* m_setMessageCreatedTable;
	NSMutableSet* m_setMessageExtCreatedTable;
	WCDB* m_oplogWcdb;
	WCDataBase* m_db;
	WCDataBaseTable* m_tableContact;
	WCDataBaseTable* m_tableContactExt;
	WCDataBaseTable* m_tableContactMeta;
	WCDataBaseTable* m_tableQQContact;
	WCDataBaseTable* m_tableSendMsg;
	WCDataBaseTable* m_tableDuplicateMsg;
	WCDataBaseTable* m_tableUploadVoice;
	WCDataBaseTable* m_tableDownloadVoice;
	WCDataBaseTable* m_tableRevokeMsg;
	WCDataBaseTable* m_tableEmoticon;
	WCDataBaseTable* m_tableEmoticonUpload;
	WCDataBaseTable* m_tableEmoticonDownload;
	WCDataBaseTable* m_tableEmoticonPackage;
	WCDataBaseTable* m_tableEmoji;
	WCDataBaseTable* m_tableEmojiCatalog;
	WCDataBaseTable* m_tableBottle;
	WCDataBaseTable* m_tableBottleContact;
	WCDataBaseTable* m_tableMassSendContact;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WCDB* m_oplogWcdb;
@property(retain) WCDataBaseTable* m_tableMassSendContact;
@property(retain) WCDataBaseTable* m_tableBottleContact;
@property(retain) WCDataBaseTable* m_tableBottle;
@property(retain) WCDataBaseTable* m_tableEmojiCatalog;
@property(retain) WCDataBaseTable* m_tableEmoji;
@property(retain) WCDataBaseTable* m_tableEmoticonPackage;
@property(retain) WCDataBaseTable* m_tableEmoticonDownload;
@property(retain) WCDataBaseTable* m_tableEmoticonUpload;
@property(retain) WCDataBaseTable* m_tableEmoticon;
@property(retain) WCDataBaseTable* m_tableRevokeMsg;
@property(retain) WCDataBaseTable* m_tableDownloadVoice;
@property(retain) WCDataBaseTable* m_tableUploadVoice;
@property(retain) WCDataBaseTable* m_tableDuplicateMsg;
@property(retain) WCDataBaseTable* m_tableSendMsg;
@property(retain) WCDataBaseTable* m_tableQQContact;
@property(retain) WCDataBaseTable* m_tableContactMeta;
@property(retain) WCDataBaseTable* m_tableContactExt;
@property(retain) WCDataBaseTable* m_tableContact;
@property(retain) WCDataBase* m_db;
+(id)md5StringFromUserName:(id)userName;
+(id)helloMessageTableName:(id)name;
+(id)messageExtTableName:(id)name;
+(id)messageTableName:(id)name;
+(id)dbPathWithDocDir:(id)docDir userName:(id)name;
-(void).cxx_destruct;
-(void)clearMessageExtCreatedTableCache;
-(void)removeMessageExtCreatedTableCache:(id)cache;
-(void)addMessageExtCreatedTableCache:(id)cache;
-(BOOL)isMessageExtTableCreated:(id)created;
-(void)clearMessageCreatedTableCache;
-(void)removeMessageCreatedTableCache:(id)cache;
-(void)addMessageCreatedTableCache:(id)cache;
-(BOOL)isMessageTableCreated:(id)created;
-(void)setupMessageCreatedTableCache;
-(id)GetHelloMessageTable:(id)table;
-(BOOL)CreateHelloMessageTable:(id)table;
-(void)ClearMessageAndExtCreatedTableCache;
-(void)DropMessageExtTable:(id)table;
-(id)GetMessageExtTable:(id)table;
-(BOOL)CreateMessageExtTable:(id)table;
-(void)DropMessageTable:(id)table;
-(id)GetMessageTable:(id)table;
-(BOOL)CreateMessageTable:(id)table;
-(void)setupEmiticonPackageTable;
-(void)setupTables;
-(id)internalCreateTable:(id)table tableClass:(Class)aClass;
-(void)createOtherTable;
-(void)createBottleTable;
-(void)createEmojiTable;
-(void)createEmoticonTable;
-(void)createMessagesTable;
-(void)createContactTable;
-(void)createTables;
-(void)clearTables;
-(void)closeDBBeforeInit;
-(void)onTransactionRollback;
-(BOOL)IsEmoticonPackageTableExist;
-(BOOL)CreateEmoticonPackageTable;
-(id)DBContext;
-(BOOL)RollbackTransaction;
-(BOOL)CommitTransaction;
-(BOOL)BeginTransaction;
-(void)Close;
-(void)InitMMDB:(id)mmdb UsrName:(id)name;
-(void)dealloc;
-(id)init;
-(BOOL)DeleteMassSendContact:(id)contact;
-(id)GetAllMassSendContact;
-(unsigned long)InsertMassSendContact:(id)contact;
-(BOOL)DeleteBottle:(unsigned long)bottle;
-(id)GetAllBottle:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)bottle;
-(id)GetBottleByLocalID:(unsigned long)anId onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(unsigned long)GetServerIDInBottleByLocalID:(unsigned long)bottleByLocalID;
-(unsigned long)GetLocalIDInBottleByBottleID:(id)bottleByBottleID;
-(BOOL)UpdateBottle:(id)bottle onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byLocalId:(unsigned long)anId;
-(unsigned long)InsertBottle:(id)bottle onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteBottleContact:(id)contact;
-(unsigned long)GetCountOfBottleContact;
-(id)GetAllBottleContact:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)contact;
-(id)GetBottleContact:(id)contact onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)UpdateBottleContact:(id)contact onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byUserName:(id)name;
-(BOOL)InsertBottleContact:(id)contact onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(unsigned long)GetCountOfDownloadVoice;
-(BOOL)UpdateDownloadVoice:(id)voice onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byUserName:(id)name localId:(unsigned long)anId voiceLen:(unsigned long)len endFlag:(unsigned long)flag;
-(BOOL)InsertDownloadVoice:(id)voice onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(id)GetOneDownloadVoiceOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteDownloadVioceByChatName:(id)name localId:(unsigned long)anId voiceLength:(unsigned long)length endFlag:(unsigned long)flag;
-(BOOL)DeleteDownloadVioceByChatName:(id)name localId:(unsigned long)anId;
-(BOOL)IsExistInDownloadVoiceByChatName:(id)downloadVoiceByChatName localId:(unsigned long)anId voiceLength:(unsigned long)length endFlag:(unsigned long)flag;
-(unsigned long)GetCountOfUploadVoice;
-(BOOL)IsExistInUploadVoiceByToUser:(id)user localId:(unsigned long)anId offset:(unsigned long)offset;
-(id)GetOneUploadVoiceOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteUploadVoiceByToUser:(id)user localId:(unsigned long)anId offset:(unsigned long)offset;
-(BOOL)DeleteUploadVoiceByToUser:(id)user localId:(unsigned long)anId;
-(BOOL)UpdateUploadVoice:(id)voice onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byUserName:(id)name localId:(unsigned long)anId offset:(unsigned long)offset;
-(BOOL)InsertUploadVoice:(id)voice onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteMessageExtByChatName:(id)name localId:(unsigned long)anId;
-(BOOL)UpdateMessageExtFlag:(unsigned long)flag byChatName:(id)name localId:(unsigned long)anId;
-(id)GetMsgExtInMessageExtWithTable:(id)table chatName:(id)name localId:(unsigned long)anId;
-(id)GetMessageExtyChatName:(id)name OnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where;
-(id)GetMsgSourceInMessageExtWithTable:(id)table chatName:(id)name localId:(unsigned long)anId;
-(id)GetMsgSourceInMessageExt:(id)messageExt localId:(unsigned long)anId;
-(BOOL)InsertMessageExt:(id)ext withChatName:(id)chatName onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)IsMessageExtExistWithChatName:(id)chatName localId:(unsigned long)anId;
-(unsigned long)GetMessageCountByChatName:(id)name where:(const WCDBConditionBase*)where;
-(BOOL)DeleteMessageByChatName:(id)name localId:(unsigned long)anId;
-(BOOL)UpdateMessageStatus:(unsigned long)status byChatName:(id)name localId:(unsigned long)anId;
-(BOOL)UpdateMessageByChatName:(id)name localId:(unsigned long)anId withDBMessage:(id)dbmessage OnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(id)GetMessagesByChatName:(id)name onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where order:(const WCDBConditionBase*)order limit:(unsigned long)limit;
-(id)GetMessageByChatName:(id)name OnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where;
-(unsigned long)GetMaxCreateTimeInMessage:(id)message;
-(unsigned long)InsertMessage:(id)message withChatName:(id)chatName onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)IsMessageExistWithChatName:(id)chatName localId:(unsigned long)anId;
-(unsigned long)GetHelloMessageCountByChatName:(id)name withDistinctProperty:(const WCDBConditionBase*)distinctProperty Where:(const WCDBConditionBase*)where;
-(BOOL)UpdateHelloMessage:(id)message byChatName:(id)name onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where;
-(BOOL)DeleteAllHelloMessageByChatName:(id)name helloUser:(id)user;
-(id)GetHelloMessagesByChatName:(id)name onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where order:(const WCDBConditionBase*)order limit:(unsigned long)limit;
-(id)GetHelloMessageByChatName:(id)name onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where order:(const WCDBConditionBase*)order;
-(unsigned long)GetMaxCreateTimeInHelloMessage:(id)helloMessage;
-(unsigned long)InsertHelloMessage:(id)message withChatName:(id)chatName onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(unsigned long)GetCountOfSendMessage;
-(id)GetSendMessageOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property AfterRowId:(unsigned long)anId;
-(BOOL)InsertSendMessage:(id)message onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteSendMessageByChatName:(id)name localId:(unsigned long)anId;
-(BOOL)IsExistInSendMessageByChatName:(id)sendMessageByChatName localId:(unsigned long)anId;
-(unsigned long)GetCountOfDuplicateMessage:(const WCDBConditionBase*)duplicateMessage;
-(BOOL)DeleteDuplicateMessageWhere:(const WCDBConditionBase*)where;
-(BOOL)IsDuplicateMessageExistByServerId:(long long)anId;
-(BOOL)InsertDuplicateMessage:(id)message onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(id)GetRevokeMsgBySvrId:(long long)anId;
-(BOOL)InsertRevokeMessage:(id)message;
-(BOOL)DeleteQQContactByUserName:(id)name;
-(BOOL)UpdateQQContact:(id)contact onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byUserName:(id)name;
-(BOOL)InsertQQContact:(id)contact onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(id)GetAllQQContactOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(id)GetQQContactByUserName:(id)name withProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(void)fillEmoticonPackageQueryProperty:(vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)IsEmoticonPackageDownloaded:(id)downloaded;
-(BOOL)IsEmoticonPackagePurchased:(id)purchased;
-(BOOL)IsEmoticonPackageExistByPackageId:(id)anId;
-(BOOL)DeleteAllEmotcionPackage;
-(BOOL)DeleteEmoticonPackageNotInIdList:(id)idList;
-(BOOL)DeleteEmoticonPackageByPackageId:(id)anId;
-(id)GetEmoticonPackageList;
-(id)GetEmoticonPackageListByPid:(id)pid;
-(BOOL)UpdateDownloadStatusInEmoticonPackage:(unsigned long)emoticonPackage byPackageId:(id)anId;
-(BOOL)UpdatePayStatusInEmoticonPackage:(unsigned long)emoticonPackage byPackageId:(id)anId;
-(BOOL)InsertEmoticonPackageList:(id)list;
-(BOOL)InsertEmoticonPackageWithId:(id)anId name:(id)name iconUrl:(id)url payStatus:(unsigned long)status downloadStatus:(unsigned long)status5;
-(BOOL)InsertEmoticonPackageWithId:(id)anId name:(id)name payStatus:(unsigned long)status downloadStatus:(unsigned long)status4;
-(BOOL)isExistInEmojiWithCatalogId:(unsigned long)catalogId emoji:(id)emoji;
-(BOOL)DeleteAllInEmoji;
-(BOOL)DelEmoji:(unsigned long)emoji Emoji:(id)emoji2;
-(id)GetAllEmojiByCatalogID:(unsigned long)anId onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)InsertEmojiIfNotExist:(id)exist onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteAllInEmojiCatalog;
-(BOOL)UpdateEmojiCatalog:(id)catalog onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byServerId:(unsigned long)anId;
-(BOOL)IsCatalogExistInEmojiCatalog:(unsigned long)emojiCatalog;
-(unsigned long)GetVersionInEmojiCatalog:(unsigned long)emojiCatalog;
-(unsigned long)GetLocalIDInEmojiCatalog:(unsigned long)emojiCatalog;
-(id)GetAllEmojiCatalog:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)catalog;
-(BOOL)InsertEmojiCatalog:(id)catalog onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DelAllEmoticon;
-(BOOL)DeleteEmoticonByPackageId:(id)anId WithoutExtFlag:(unsigned long)flag;
-(BOOL)DeleteEmoticonByMd5:(id)a5;
-(BOOL)IsEmoticonExistByMd5:(id)a5;
-(id)GetEmoticonsOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property Where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by limit:(unsigned long)limit;
-(id)GetAllEmoticon:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)emoticon;
-(BOOL)UpdateExtFlagInEmoticon:(unsigned long)emoticon byMd5:(id)a5 NeedOverWrite:(BOOL)write;
-(BOOL)UpdatePackageIdInEmoticon:(id)emoticon byMd5:(id)a5;
-(BOOL)UpdateLastUsedTimeInEmoticon:(unsigned long)emoticon byMd5:(id)a5;
-(BOOL)UpdateExtInfoInEmoticon:(id)emoticon byMd5:(id)a5;
-(BOOL)UpdateEmoticon:(id)emoticon onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)InsertEmoticon:(id)emoticon onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(unsigned long)GetCountOfEmoticonUploadByUserName:(id)emoticonUploadByUserName;
-(unsigned long)GetCountOfEmoticonUpload;
-(BOOL)DelAllEmoticonUpload;
-(BOOL)DelRowInEmoticonUpload:(id)emoticonUpload LocalID:(unsigned long)anId;
-(id)GetFirstEmoticonUploadOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)InsertEmoticonUpload:(id)upload onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)IsEmoticonUploadExistByUserName:(id)name localId:(unsigned long)anId;
-(unsigned long)GetCountOfEmoticonDownloadByUserName:(id)emoticonDownloadByUserName;
-(unsigned long)GetCountOfEmoticonDownload;
-(BOOL)DelAllEmoticonDownload;
-(BOOL)DelRowInEmoticonDownload:(id)emoticonDownload n64SvrID:(long long)anId;
-(id)GetFirstEmoticonDownloadOnProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)InsertEmoticonDownload:(id)download onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)IsInEmoticonDownload:(id)emoticonDownload n64SvrID:(long long)anId;
-(BOOL)SetFriendMetaFlag:(unsigned long)flag ForUser:(id)user;
-(unsigned long)GetFriendMetaFlag:(id)flag;
-(BOOL)SetLastUpdateTime:(unsigned long)time ForUser:(id)user;
-(unsigned long)GetLastUpdateTimeOfUser:(id)user;
-(id)GetContactAndExtWithContactProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)contactProperty contactExtProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property where:(const WCDBConditionBase*)where getError:(id*)error;
-(id)ContactExtTableName;
-(id)ContactTableName;
-(BOOL)DeleteContactExtByUserName:(id)name;
-(id)GetChatRoomMemberByUserName:(id)name;
-(id)GetContactExtByUserName:(id)name property:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)UpdateChatRoomMemberInContactExt:(id)contactExt byUserName:(id)name;
-(BOOL)UpdateChatStatusInContactExt:(unsigned long)contactExt byUserName:(id)name;
-(BOOL)UpdateContactExt:(id)ext withProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byUserName:(id)name;
-(BOOL)InsertContactExt:(id)ext withProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)IsContactExtExist:(id)exist;
-(BOOL)IsContactExist:(id)exist;
-(BOOL)DeleteContactByUserName:(id)name;
-(id)GetContactsWhere:(const WCDBConditionBase*)where onProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property getError:(id*)error;
-(id)GetContactByUserName:(id)name property:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)UpdateExtentInContact:(id)contact byUserName:(id)name;
-(BOOL)UpdateContact:(id)contact withProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property byUserName:(id)name;
-(BOOL)InsertContact:(id)contact withProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property;
-(BOOL)DeleteOplog:(unsigned long)oplog;
-(id)GetOneOplogAfterOplogId:(unsigned long)anId;
-(BOOL)InsertOplog:(id)oplog;
-(id)oplogDBDirWithDocDir:(id)docDir userName:(id)name;
-(void)CloseOplogDB;
-(void)SetupOplogDBWithDocDir:(id)docDir userName:(id)name;
@end


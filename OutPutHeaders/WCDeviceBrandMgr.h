/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "IWCDeviceAccountMgrExt.h"
#import "MMService.h"
#import "WCDeviceAuthLogicDelegate.h"
#import "IContactMgrExt.h"
#import "WCDeviceNetworkLogicMgrDelegate.h"
#import "MMService.h"
#import "BlueAdapterDelegate.h"
#import "WCDeviceSendDataToManufacturSvrLogicDelegate.h"
#import "IMsgExt.h"
#import "WCDeviceWifiStateLogicDelegate.h"
#import "WCDeviceM7LogicDelegate.h"
#import "WeChat-Structs.h"
#import "IPreEnterWechatLogicExt.h"

@class WCDeviceAuthLogic, WCDeviceSendDataToManufacturSvrLogic, BlueManager, NSMutableDictionary, NSString, NSMutableArray, WCDeviceM7Logic, WCDeviceNetworkLogicMgr, WCDeviceWifiStateLogic;

@interface WCDeviceBrandMgr : MMService <MMService, WCDeviceAuthLogicDelegate, WCDeviceNetworkLogicMgrDelegate, WCDeviceSendDataToManufacturSvrLogicDelegate, WCDeviceWifiStateLogicDelegate, WCDeviceM7LogicDelegate, IMsgExt, BlueAdapterDelegate, IWCDeviceAccountMgrExt, IContactMgrExt, IPreEnterWechatLogicExt> {
	WCDeviceAuthLogic* _authLogic;
	WCDeviceSendDataToManufacturSvrLogic* _sendDataLogic;
	WCDeviceNetworkLogicMgr* _networkLogic;
	WCDeviceWifiStateLogic* _wifiStateLogic;
	WCDeviceM7Logic* _m7Logic;
	unsigned long _scanMode;
	unsigned long _lastSyncModeScanTime;
	unsigned long _canTimingSyncTime;
	unsigned long _lastUploadStepCount;
	unsigned long _lastUploadHKStepCount;
	unsigned long _lastUploadM7StepCount;
	NSMutableDictionary* _devMaxSeqDic;
	long _lastReportBTStateTime;
	BOOL _m_isScanning;
	BlueManager* m_blueMgr;
	NSMutableDictionary* m_devices;
	NSMutableArray* m_tasks;
	NSMutableArray* m_bindingDevices;
	int _m_appState;
	unsigned long _m_lastGetBoundDevTime;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned long m_lastGetBoundDevTime;
@property(assign, nonatomic) BOOL m_isScanning;
@property(assign, nonatomic) int m_appState;
@property(retain, nonatomic) NSMutableArray* m_bindingDevices;
@property(retain, nonatomic) NSMutableArray* m_tasks;
@property(retain, nonatomic) NSMutableDictionary* m_devices;
@property(retain, nonatomic) BlueManager* m_blueMgr;
-(void).cxx_destruct;
-(void)onPreEnterWechatDone;
-(void)onWCDeviceAccountBound:(id)bound;
-(void)onWCDeviceAccountUnbind:(id)unbind;
-(void)onGetSportDeviceListResponse:(id)response ErrorCode:(int)code;
-(void)onSendWCDevicesGetOperTicketResponse:(id)response reqTicketList:(id)list ErrorCode:(int)code;
-(void)onBatchSearchWCDeviceResponse:(id)response Scene:(int)scene ErrorCode:(int)code;
-(void)onSendAirKissHelpUrlReq:(id)req device:(id)device;
-(void)onSendSearchBLEHardDevice:(id)device device:(id)device2;
-(void)onSendSearchWifiHardDevice:(id)device extData:(id)data;
-(void)onSearchWCDeviceResponse:(id)response;
-(void)onWCDeviceGetBoundDevicesResponse:(id)response;
-(void)onSendWCDeviceUnbindResponse:(id)response deviceId:(id)anId bAllUnbind:(BOOL)unbind Error:(id)error;
-(void)onSendWCDeviceBindResponse:(id)response Ticket:(id)ticket Error:(id)error;
-(void)onUpdateMyDeviceAttrResponse:(id)response Error:(int)error;
-(void)onUploadDeviceStepReponse:(id)reponse stepCount:(unsigned long)count HKStepCount:(unsigned long)count3 M7StepCount:(unsigned long)count4 sourceWhiteList:(id)list ErrorCode:(int)code;
-(void)onGotDeviceStepObject:(id)object;
-(void)OnGetNewXmlMsg:(id)msg Type:(id)type MsgWrap:(id)wrap;
-(void)onhandleWifiStateUpdateMsgEnd:(id)end Status:(unsigned long)status;
-(void)onHandleMsgEnd:(id)end ErrCode:(int)code;
-(void)onWCDeviceAuthEnd:(int)end DID:(long long)did RespTask:(id)task SessionKey:(id)key;
-(void)willSuspend;
-(void)willEnterForeground;
-(void)willResignActive;
-(BOOL)isSendTo3rdServer:(id)a3rdServer ForType:(int)type;
-(BOOL)isSendToH5:(id)h5 ForType:(int)type;
-(long long)getBleDidByMacString:(id)getBle AndConnProtoStr:(id)str;
-(long long)getEaDidByMacString:(id)getEa AndConnProtoStr:(id)str;
-(long long)getDidByMacString:(id)get AndConnProtoStr:(id)str;
-(long long)sendPushData:(id)data ToDevice:(id)device andDeviceType:(id)type withType:(int)type4;
-(void)sendPushDataToDevice:(id)device;
-(id)__getTimeString;
-(int)__channelConnectStateToChannelState:(int)channelState;
-(id)__findChannelByChannelId:(long long)anId;
-(id)__findDeviceByDeviceId:(long long)anId;
-(long long)__findDisconnectingDeviceIdByChannelId:(long long)anId;
-(long long)__findDeviceIdByChannelId:(long long)anId;
-(void)__findDeviceIdAndChannelIdBySessionId:(long long)anId :(long long*)arg2 :(long long*)arg3;
-(void*)__unpackPbData:(unsigned short)data :(const AutoBuffer*)arg2;
-(void)__stopChannel:(long long)channel :(long long)arg2;
-(void)__onSessionCreated:(long long)created :(long long)arg2 :(long long)arg3;
-(bool)c2objc_accessoryResp2Buf:(long long)buf :(AutoBuffer*)arg2;
-(bool)c2objc_accessoryPushReq2Buf:(long long)buf :(AutoBuffer*)arg2;
-(void)c2objc_onAccessoryRecvPack:(long long)pack :(unsigned short)arg2 :(unsigned short)arg3 :(const AutoBuffer*)arg4 :(int)arg5;
-(void)c2objc_onAccessoryChannelConnectStateChanged:(long long)changed :(int)arg2 :(int)arg3 :(int)arg4;
-(void)c2objc_onAccessoryCmdEnd:(long long)end :(int)arg2 :(int)arg3 :(const char*)arg4;
-(bool)c2objc_sendData:(const AutoBuffer*)data toBluetooth:(long long)bluetooth;
-(bool)c2objc_closeBluetoothSession:(long long)session;
-(bool)c2objc_connectBluetoothSession:(long long)session;
-(bool)c2objc_createBluetoothSessionByDeviceId:(long long)anId andChannelId:(long long)anId2;
-(void)onBlueProfilePedometerTargetWrote:(long long)wrote;
-(void)onBlueProfilePedometerTargetUpdated:(long long)updated Step:(int)step;
-(void)onBlueProfilePedometerInfoUpdated:(long long)updated Info:(id)info;
-(id)getBeginDate;
-(void)onBlueProfileConnectStateChanged:(long long)changed State:(int)state ErrorCode:(int)code;
-(void)onStateChange:(int)change;
-(void)onSessionClosed:(long long)closed;
-(void)onSessionDataAvailable:(long long)available;
-(void)onSessionWrote:(long long)wrote;
-(void)onSessionError:(long long)error errorCode:(int)code;
-(void)onSessionConnectError:(long long)error errorCode:(int)code;
-(void)onSessionConnected:(long long)connected;
-(void)onDeviceLost:(long long)lost;
-(void)onDeviceFound:(long long)found WithExtData:(id)extData;
-(void)onDeviceFound:(long long)found;
-(void)handleWCDeviceReq:(long long)req Seq:(unsigned short)seq CmdID:(unsigned short)anId Req:(const void*)req4;
-(BOOL)checkDeviceReqValidity:(long long)validity Seq:(unsigned short)seq;
-(void)sendDecodeErrorToDevice:(long long)device;
-(void)sendSwitchBackgroundPushWithOpToDevice:(int)device;
-(id)genInitRespTask:(int)task DID:(unsigned long long)did Seq:(unsigned short)seq :(MmBp__InitRequest*)arg4 :(AutoBuffer*)arg5;
-(void)handleWCDeviceCmdEnd:(long long)end ErrType:(int)type ErrCode:(int)code ErrMsg:(const char*)msg;
-(void)handleWCDeviceChannelStateChanged:(long long)changed OldState:(int)state NewState:(int)state3;
-(void)tryUploadM7OrHealthKitStepCount:(BOOL)count;
-(int)getWCDeviceWifiState:(id)state;
-(void)subscribeWifiStateUpdateFor:(id)aFor ReqType:(unsigned long)type;
-(void)sendGetSportDeviceListReq;
-(void)sendSearchBLEHardDevice:(id)device;
-(void)sendGetHardDeviceHelpUrl:(id)url;
-(void)sendSearchWifiHardDeviceReq:(id)req;
-(void)sendUpdateMyDeviceAttrReq:(id)req alias:(id)alias isMain:(unsigned long)main;
-(void)sendUploadBlueProfileStepReq:(id)req stepCount:(unsigned long)count;
-(void)sendWCDevicesGetOperTicketRequest:(id)request Filter:(id)filter;
-(void)batchSearchWCDeviceByDevice:(id)device Filter:(id)filter Secene:(int)secene;
-(void)sendWCDeviceGetBoundDevicesRequest;
-(void)sendWCDeviceUnbindRequestWithDeviceType:(id)deviceType deviceId:(id)anId;
-(void)sendWCDeviceUnbindRequest:(id)request;
-(void)sendWCDeviceBindRequest:(id)request Ticket:(id)ticket SubscribeFlag:(unsigned)flag;
-(void)sendWCDeviceBindRequest:(id)request Ticket:(id)ticket;
-(void)stopTask:(long long)task;
-(int)startTask:(id)task;
-(void)switchDeviceMode:(BOOL)mode DID:(long long)did EnterOrExitChatView:(BOOL)view;
-(BOOL)isDeviceAuthed:(long long)authed;
-(BOOL)isMyMobileSupportBLE;
-(void)enableBluetooth;
-(int)getBlueToothState;
-(int)getChannelState:(long long)state;
-(id)getDeviceMac:(long long)mac;
-(id)getDeviceName:(long long)name;
-(void)stopChannel:(long long)channel;
-(int)startChannel:(long long)channel;
-(void)stopSyncModeDevice:(id)device;
-(void)stopScan;
-(void)stopAutoSyncModeScan;
-(void)startAutoSyncModeScan;
-(BOOL)canStartAutoSync;
-(void)stopTimingSyncModeScan;
-(void)startTimingSync;
-(BOOL)canStartTimingSync;
-(unsigned long)getTimingSyncCurrentTime;
-(BOOL)canScanBlueToothDevice;
-(BOOL)needScanBlueToothDevice;
-(BOOL)hasM7Device;
-(BOOL)hasBlueToothDevice;
-(int)scan:(id)scan;
-(int)writePedometerProfileTarget:(long long)target Step:(int)step;
-(int)readPedometerProfileTarget:(long long)target;
-(int)readPedometerProfileCurPedometerInfo:(long long)info;
-(int)getProfileConnectState:(long long)state;
-(int)getProfileType:(long long)type;
-(void)closeProfile:(long long)profile;
-(int)connectProfile:(long long)profile ProfileType:(int)type;
-(int)scanProfile;
-(void)tryReportBlueState;
-(id)getBlueMgr;
-(void)exchange:(id)exchange;
-(void)dealloc;
-(id)init;
@end


/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WeChat-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class CMMDB;

@interface CMessageDB : XXUnknownSuperclass {
	CMMDB* m_oMMDB;
}
@property(retain, nonatomic) CMMDB* m_oMMDB;
-(void).cxx_destruct;
-(void)setMessageUnreadCondition:(WCDBConditionBase*)condition;
-(void)fillDBMsg:(id)msg andProperty:(vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property fromMsgWrap:(id)msgWrap des:(unsigned long)des;
-(void)HandleMessage:(id)message ChatName:(id)name Des:(unsigned long)des;
-(id)GetLocalUsrName:(id)name;
-(void)InsertNewRowInDuplicateMsg:(long long)duplicateMsg Time:(unsigned long)time;
-(void)DelMsgInDuplicateMsg;
-(void)AddMsgToSendTable:(id)sendTable MsgWrap:(id)wrap;
-(unsigned long)GetUnReadCountInHello:(id)hello;
-(unsigned long)GetCountInHello:(id)hello;
-(unsigned long)GetSayHelloStatus:(id)status LocalID:(unsigned long)anId;
-(BOOL)SetSayHelloStatus:(id)status LocalID:(unsigned long)anId Status:(unsigned long)status3;
-(BOOL)ClearHelloUnRead:(id)read HelloUser:(id)user;
-(void)DelHelloMsg:(id)msg HelloUser:(id)user;
-(id)GetHelloMsg:(id)msg HelloUser:(id)user Limit:(unsigned long)limit OnlyTo:(BOOL)to;
-(id)GetHelloUsers:(id)users Limit:(unsigned long)limit OnlyUnread:(BOOL)unread;
-(id)GetHelloMsgForSyncRead:(id)syncRead Where:(const WCDBConditionBase*)where;
-(id)GetHelloMsg:(id)msg Where:(const WCDBConditionBase*)where Order:(const WCDBConditionBase*)order Limit:(unsigned long)limit;
-(void)AddHelloMsg:(id)msg MsgWrap:(id)wrap HelloUser:(id)user OpCode:(unsigned long)code DES:(unsigned long)des checkCreateTime:(BOOL)time status:(unsigned long)status;
-(unsigned long)GetImgOrVideoMsgCount:(id)count;
-(unsigned long)GetImgOrVideoMsgCount:(id)count FromID:(unsigned long)anId CreateTime:(unsigned long)time;
-(id)GetImgOrVideoOrAppNextMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit CreateTime:(unsigned long)time;
-(id)GetImgOrVideoLastMsg:(id)msg;
-(id)GetImgOrVideoOrAppLastMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit CreateTime:(unsigned long)time;
-(id)GetAppMsgList:(id)list FromID:(unsigned long)anId CreateTime:(unsigned long)time Limit:(unsigned long)limit Where:(WCDBConditionBase)where;
-(id)GetAppMsgList:(id)list FromID:(unsigned long)anId CreateTime:(unsigned long)time Limit:(unsigned long)limit;
-(id)GetAppMsgList:(id)list AfterID:(unsigned long)anId CreateTime:(unsigned long)time Limit:(unsigned long)limit;
-(id)GetImgAndVideoMsgList:(id)list;
-(id)GetImgMsgList:(id)list;
-(id)GetMsgForFlowWall:(id)flowWall Where:(const WCDBConditionBase*)where Order:(const WCDBConditionBase*)order Limit:(unsigned long)limit;
-(unsigned long)GetImgMsgCount:(id)count;
-(unsigned long)GetImgMsgCount:(id)count FromID:(unsigned long)anId CreateTime:(unsigned long)time;
-(id)GetImgLastMsg:(id)msg;
-(id)GetImgLastMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit CreateTime:(unsigned long)time;
-(id)GetImgNextMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit CreateTime:(unsigned long)time;
-(void)UpdatePimMsg:(id)msg LocalID:(unsigned long)anId Content:(id)content CreateTime:(unsigned long)time;
-(void)UpdateVideoMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateVoiceMessage:(id)message MsgWrap:(id)wrap;
-(void)UpdateVoiceStatus:(id)status LocalID:(unsigned long)anId DownloadStatus:(unsigned long)status3;
-(BOOL)AddMessageToChatExt:(id)chatExt MsgWrap:(id)wrap;
-(unsigned long)GetMesCount:(id)count MesType:(unsigned long)type;
-(unsigned long)GetAllMesCount:(id)count;
-(unsigned long)GetUnReadCount:(id)count;
-(unsigned long)GetTextMsgCount:(id)count FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(void)DelMsg:(id)msg MsgList:(id)list DelAll:(BOOL)all;
-(void)TransferMsgFromChatToDuplicate:(id)duplicate;
-(void)ClearUnReadForSync:(id)sync CreateTime:(unsigned long)time;
-(BOOL)ClearUnRead:(id)read FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(void)DropChatTable:(id)table;
-(void)ModVoipMsgStatus:(id)status MsgWrap:(id)wrap;
-(void)ModMsgByBitSet:(id)set MsgWrap:(id)wrap BitSet:(unsigned long)set3;
-(void)ModLocationMsg:(id)msg MsgWrap:(id)wrap;
-(void)ModMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)InsertRevokeMessage:(id)message;
-(id)GetRevokeMessage:(long long)message;
-(id)GetFirstUnreadMsg:(id)msg;
-(id)GetLastMsgToUsr:(id)usr;
-(id)GetLastMsgFromUsr:(id)usr;
-(id)GetLastInsertMsg:(id)msg;
-(id)GetLastMsg:(id)msg;
-(id)GetTextMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit;
-(id)GetTextMsg:(id)msg FromID:(unsigned long)anId ToID:(unsigned long)anId3;
-(id)GetMsg:(id)msg BizMsgClientID:(id)anId;
-(id)GetMsg:(id)msg n64SvrID:(long long)anId;
-(id)GetMsg:(id)msg LocalID:(unsigned long)anId;
-(id)QueryMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit Where:(const WCDBConditionBase*)where;
-(id)GetDownMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(id)GetMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count FromSequence:(unsigned long)sequence;
-(id)GetMsgByCreateTime:(id)time FromID:(unsigned long)anId FromCreateTime:(unsigned long)createTime Limit:(unsigned long)limit LeftCount:(unsigned*)count;
-(id)GetDownMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit;
-(id)GetMsg:(id)msg FromID:(unsigned long)anId Limit:(unsigned long)limit;
-(id)GetMsgForSyncRead:(id)syncRead Where:(const WCDBConditionBase*)where;
-(id)GetMsg:(id)msg Where:(const WCDBConditionBase*)where order:(const WCDBConditionBase*)order Limit:(unsigned long)limit;
-(const WCDBConditionBase*)orderOfAscCreateTimeAndMsgLocalId;
-(const WCDBConditionBase*)orderOfDescCreateTimeAndMsgLocalId;
-(void)AddBackupMsg:(id)msg MsgWrap:(id)wrap;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap withTimeFixed:(BOOL)timeFixed;
-(void)AddMsg:(id)msg MsgWrap:(id)wrap;
-(BOOL)RollbackTransaction;
-(BOOL)CommitTransaction;
-(BOOL)BeginTransaction;
-(id)DBContext;
-(void)InitDB:(id)db;
-(id)init;
@end


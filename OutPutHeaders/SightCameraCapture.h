/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WeChat-Structs.h"
#import "AVCaptureAudioDataOutputSampleBufferDelegate.h"
#import "MMQRCodeScannerDelegate.h"
#import "AVCaptureVideoDataOutputSampleBufferDelegate.h"
#import "MMObject.h"

@class AVCaptureSession, AVCaptureVideoPreviewLayer, NSString, NSObject, AVCaptureAudioDataOutput, AVCaptureMovieFileOutput, AVCaptureDevice, AVCaptureDeviceInput, AVCaptureVideoDataOutput, NSMutableArray, MMQRCodeScanner;
@protocol OS_dispatch_queue;

@interface SightCameraCapture : MMObject <AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, MMQRCodeScannerDelegate> {
	BOOL m_isActive;
	BOOL m_isAudioActive;
	BOOL m_isFileOutputActive;
	AVCaptureSession* m_captureSession;
	AVCaptureDevice* m_inputCamera;
	AVCaptureDeviceInput* m_videoInput;
	AVCaptureDeviceInput* m_audioInput;
	AVCaptureVideoDataOutput* m_videoOutput;
	AVCaptureAudioDataOutput* m_audioOutput;
	AVCaptureMovieFileOutput* m_fileOutput;
	AVCaptureVideoPreviewLayer* m_previewLayer;
	CGSize m_targetVideoSize;
	float m_targetBitRate;
	NSMutableArray* m_movieWriters;
	NSMutableArray* m_moviePreviewers;
	MMQRCodeScanner* m_QRCodeScanner;
	unsigned long m_scannerSkip;
	NSObject<OS_dispatch_queue>* m_callbackQueue;
	BOOL m_needCapturePicture;
	id m_captureBlock;
	BOOL _activeQRScan;
	NSString* _preset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* callbackQueue;
@property(readonly, assign, nonatomic) AVCaptureVideoPreviewLayer* previewLayer;
@property(assign, nonatomic) BOOL activeQRScan;
@property(readonly, assign, nonatomic) BOOL isAudioActive;
@property(assign, nonatomic) BOOL isActive;
@property(assign, nonatomic) NSString* preset;
-(void).cxx_destruct;
-(void)initQRCodeScanner;
-(void)onQRCodeScanSuccess:(id)success atPoint:(vector<QBAR_POINT, std::__1::allocator<QBAR_POINT> >)point originSize:(CGSize)size;
-(void)onNoQRCode;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setZoomLevel:(float)level;
-(void)zoom;
-(BOOL)canZoom;
-(void)focusAtPoint:(CGPoint)point;
-(void)stopCameraCaptureAudioDevice;
-(BOOL)stopCameraCapture;
-(BOOL)startCameraCaptureAudioDevice;
-(void)startCameraCapture;
-(void)onCameraFailed;
-(BOOL)isRunning;
-(void)capturePreviewImageWithBlock:(id)block;
-(void)removeMoviePreviewer:(id)previewer;
-(void)setMoviePreviwerOutputSizeAndSession:(id)session;
-(void)addMoviePreviewer:(id)previewer;
-(void)setPreviewReady;
-(void)removeFileWriter:(id)writer;
-(void)removeMovieWriter:(id)writer;
-(void)addMovieWriter:(id)writer;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)switchToFileOutputMode;
-(BOOL)isFileOutputMode;
-(void)dealloc;
-(BOOL)initCaptureSession:(id)session;
-(id)initWithSessionPreset:(id)sessionPreset cameraPosition:(int)position;
-(id)initWithPreset:(id)preset;
@end


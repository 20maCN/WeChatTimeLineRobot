/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WeChat-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "UIAlertViewDelegate.h"
#import "MMAudioDataReadStreamDelegate.h"

@class NSNotificationCenter, MMAudioDataPipe, NSThread, NSString, NSDictionary;

@interface MMAudioStreamPlayer : XXUnknownSuperclass <MMAudioDataReadStreamDelegate, UIAlertViewDelegate> {
	MMAudioDataPipe* m_dataPipe;
	OpaqueAudioQueue* audioQueue;
	OpaqueAudioFileStreamID* audioFileStream;
	AudioStreamBasicDescription asbd;
	NSThread* internalThread;
	AudioQueueBuffer* audioQueueBuffer[16];
	AudioStreamPacketDescription packetDescs[512];
	unsigned fillBufferIndex;
	unsigned long packetBufferSize;
	unsigned long bytesFilled;
	unsigned long packetsFilled;
	bool inuse[16];
	int buffersUsed;
	int state;
	int stopReason;
	int errorCode;
	long err;
	bool discontinuous;
	opaque_pthread_mutex_t queueBuffersMutex;
	opaque_pthread_cond_t queueBufferReadyCondition;
	NSNotificationCenter* notificationCenter;
	unsigned long bitRate;
	int dataOffset;
	int fileLength;
	unsigned long long audioDataByteCount;
	unsigned long long processedPacketsCount;
	unsigned long long processedPacketsSizeTotal;
	double seekTime;
	BOOL seekWasRequested;
	double requestedSeekTime;
	double sampleRate;
	double packetDuration;
	double lastProgress;
	BOOL pausedByInterruption;
	NSDictionary* streamProperties;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign) NSDictionary* streamProperties;
@property(assign) unsigned long bitRate;
@property(readonly, assign) double duration;
@property(readonly, assign) double progress;
@property(assign) int state;
@property(assign) int errorCode;
+(unsigned long)hintForFileExtension:(id)fileExtension;
+(id)stringForErrorCode:(int)errorCode;
-(void).cxx_destruct;
-(void)handleInterruptionChangeToState:(unsigned long)state;
-(void)handlePropertyChangeForQueue:(OpaqueAudioQueue*)queue propertyID:(unsigned long)anId;
-(void)handleBufferCompleteForQueue:(OpaqueAudioQueue*)queue buffer:(AudioQueueBuffer*)buffer;
-(void)handleAudioPackets:(const void*)packets numberBytes:(unsigned long)bytes numberPackets:(unsigned long)packets3 packetDescriptions:(AudioStreamPacketDescription*)descriptions;
-(void)handlePropertyChangeForFileStream:(OpaqueAudioFileStreamID*)fileStream fileStreamPropertyID:(unsigned long)anId ioFlags:(unsigned*)flags;
-(void)createQueue;
-(void)enqueueBuffer;
-(void)handleReadFromStream:(id)stream eventType:(unsigned long)type;
-(OpaqueAudioQueue*)getAudioQueue;
-(void)stop;
-(void)pause;
-(double)calculatedBitRate;
-(void)seekToTime:(double)time;
-(void)internalSeekToTime:(double)time;
-(void)start;
-(void)startInternal;
-(BOOL)isIdle;
-(BOOL)isPaused;
-(BOOL)isPlaying;
-(BOOL)isWaiting;
-(void)mainThreadStateNotification;
-(void)failWithErrorCode:(int)errorCode;
-(void)reportError:(int)error;
-(void)presentAlertWithTitle:(id)title message:(id)message;
-(void)onHandleReadEventfromStream:(id)stream eventType:(unsigned long)type;
-(BOOL)runLoopShouldExit;
-(BOOL)isFinishing;
-(void)dealloc;
-(id)initWithDataPipe:(id)dataPipe;
@end


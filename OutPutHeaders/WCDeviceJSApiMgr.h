/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "MMService.h"
#import "IWCDeviceBrandMgrExt.h"
#import "IWCDeviceAccountMgrExt.h"
#import "MMService.h"
#import "IWCLanDeviceMgrExt.h"
#import "WCDeviceJSApiBatchSearchLogicHelpDelegate.h"

@class NSMutableArray, WCDeviceJSApiBatchSearchLogicHelp, NSString, NSMutableDictionary, MMWebViewController, JSEvent;

@interface WCDeviceJSApiMgr : MMService <IWCLanDeviceMgrExt, MMService, WCDeviceJSApiBatchSearchLogicHelpDelegate, IWCDeviceAccountMgrExt, IWCDeviceBrandMgrExt> {
	BOOL m_hasInit;
	BOOL m_hasInitLan;
	BOOL m_hasStartScan;
	BOOL m_hasStartScanLan;
	MMWebViewController* m_currWebViewController;
	NSString* m_brandUserName;
	NSMutableArray* m_deviceSearchedList;
	WCDeviceJSApiBatchSearchLogicHelp* m_batchSearchDeviceLogicHelp;
	NSMutableArray* m_deviceTicketList;
	NSMutableArray* m_deviceConnectStateList;
	JSEvent* m_sendDataJsEvent;
	NSMutableDictionary* m_directions;
	int m_enterScence;
	NSMutableDictionary* m_taskEventPair;
	long long m_sendDataJsTaskId;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableDictionary* m_taskEventPair;
@property(assign, nonatomic) int m_enterScence;
@property(retain, nonatomic) NSMutableDictionary* m_directions;
@property(retain, nonatomic) JSEvent* m_sendDataJsEvent;
@property(assign, nonatomic) long long m_sendDataJsTaskId;
@property(retain, nonatomic) NSMutableArray* m_deviceConnectStateList;
@property(retain, nonatomic) NSMutableArray* m_deviceTicketList;
@property(retain, nonatomic) WCDeviceJSApiBatchSearchLogicHelp* m_batchSearchDeviceLogicHelp;
@property(retain, nonatomic) NSMutableArray* m_deviceSearchedList;
@property(assign, nonatomic) BOOL m_hasStartScanLan;
@property(assign, nonatomic) BOOL m_hasStartScan;
@property(assign, nonatomic) BOOL m_hasInitLan;
@property(assign, nonatomic) BOOL m_hasInit;
@property(retain, nonatomic) NSString* m_brandUserName;
@property(assign, nonatomic) __weak MMWebViewController* m_currWebViewController;
-(void).cxx_destruct;
-(void)onWCDeviceAccountBound:(id)bound;
-(void)onWCDeviceAccountUnbind:(id)unbind;
-(void)onWCLanDeviceReceiveNotify:(id)notify DeviceId:(id)anId Dictionary:(id)dictionary;
-(void)onWCLanDeviceConnectStateNotify:(id)notify DeviceId:(id)anId StateCode:(int)code;
-(void)onSendDataToWCLanDevice:(long long)wclanDevice ErrCode:(int)code;
-(void)onTaskPerformed:(long long)performed ErrCode:(int)code;
-(void)onReceiveWCLanDeviceDisc:(id)disc;
-(void)onWifiHardDeviceSearch:(id)search respData:(id)data ExtData:(id)data3;
-(void)onWCDeviceSendDataToWebView:(id)webView data:(id)data;
-(void)onSendWCDevicesGetOperTicketResponse:(id)response reqTicketList:(id)list ErrorCode:(int)code;
-(void)onWCDeviceBlueToothStateChanged:(int)changed;
-(void)onWCDeviceInitEnd:(int)end DID:(long long)did isHandled:(BOOL*)handled;
-(void)onWCDeviceAuthEnd:(int)end DID:(long long)did isHandled:(BOOL*)handled;
-(void)onWCDeviceChannelStateChanged:(long long)changed :(int)arg2 :(int)arg3;
-(void)onWCDeviceLost:(long long)lost;
-(void)handleWCDeviceConnectStateChanged:(long long)changed newConnectState:(int)state;
-(void)onWCDeviceFoundAddExtData:(long long)data extData:(id)data2;
-(void)onWCDeviceFoundForJSAPI:(long long)jsapi;
-(void)onWCDeviceSendDataEnd:(long long)end ErrType:(int)type ErrCode:(int)code ErrMsg:(const char*)msg;
-(void)notifyWebViewScanResultForLan:(id)lan;
-(void)notifyWebViewScanResult:(id)result;
-(void)onWCDeviceJSApiBatchSearchResp:(id)resp;
-(void)addNewSearchDeviceWithDid:(long long)addNewSearchDeviceWith extData:(id)data;
-(BOOL)canHdSendData:(id)data;
-(BOOL)canOpenWXDeviceLib:(id)lib;
-(id)getExtraInfoUserName:(id)name;
-(BOOL)isSendDataDirectionToServer:(id)server;
-(BOOL)isSendDataDirectionToH5:(id)h5;
-(BOOL)isSendDataDirectionSet:(id)set;
-(void)setSendDataDirection:(unsigned long)direction ForDevice:(id)device;
-(void)sendData:(id)data ToDevice:(id)device CallBack:(id)back;
-(void)getDeviceInfos:(id)infos;
-(void)getDeviceTicket:(id)ticket operType:(unsigned long)type CallBack:(id)back;
-(void)disConnectDevice:(id)device CallBack:(id)back;
-(void)connectDevice:(id)device CallBack:(id)back;
-(void)stopScanDevice:(id)device;
-(void)startScanDevice:(id)device;
-(void)closeWXDeviceLib:(id)lib;
-(void)openWXDeviceLib:(id)lib CallBack:(id)back;
-(void)sendDataToBlue:(id)blue ToDevice:(id)device CallBack:(id)back;
-(void)sendDataToLan:(id)lan ToDevice:(id)device CallBack:(id)back;
-(void)getDeviceInfosForBlue:(id)blue;
-(void)getDeviceInfosForLan:(id)lan;
-(void)disConnectDeviceForBlue:(id)blue CallBack:(id)back;
-(void)disConnectDeviceForLan:(id)lan CallBack:(id)back;
-(void)connectDeviceForBlue:(id)blue CallBack:(id)back;
-(void)connectDeviceForLan:(id)lan CallBack:(id)back;
-(void)stopScanDeviceForBlue:(id)blue;
-(void)stopScanDeviceForLan:(id)lan;
-(void)startScanDeviceForBlue:(id)blue;
-(void)startScanDeviceForLan:(id)lan;
-(void)closeWXDeviceLibResource;
-(void)closeWXDeviceLibForLan;
-(void)closeWXDeviceLibForBlue;
-(id)exchangeDeviceState2Str:(int)str;
-(void)notifyWebViewBindStateChange:(id)change bindState:(BOOL)state;
-(void)notifyWebViewConnectStateChange:(id)change connectState:(int)state;
-(int)getDeviceState:(long long)state;
-(void)initWCDeviceLibResource;
-(void)__resetHdJsSession;
-(BOOL)isLanType:(id)type;
-(void)dealloc;
-(void)onServiceInit;
@end


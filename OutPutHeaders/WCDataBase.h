/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WeChat-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "WCDBCorruptReportInterface.h"

@class NSString, WCDBCorruptReport, NSData, NSRecursiveLock;
@protocol WCDataBaseEventDelegate;

@interface WCDataBase : XXUnknownSuperclass <WCDBCorruptReportInterface> {
	sqlite3* m_dbHandle;
	NSData* m_dbEncryptKey;
	BOOL m_isMemoryOnly;
	NSString* m_nsDBPath;
	NSString* m_nsDBFilePath;
	NSString* m_nsDBName;
	NSRecursiveLock* m_oLock;
	unsigned m_databaseID;
	id<WCDataBaseEventDelegate> m_eventDelegate;
	WCDBCorruptReport* m_corruptReport;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WCDBCorruptReport* m_corruptReport;
@property(assign) __weak id<WCDataBaseEventDelegate> m_eventDelegate;
@property(readonly, assign, nonatomic) NSString* m_nsDBFilePath;
@property(readonly, assign, nonatomic) NSString* m_nsDBPath;
@property(readonly, assign, nonatomic) BOOL m_isMemoryOnly;
+(BOOL)GetRowId:(long long*)anId fromObject:(id)object;
+(void)globalConfig;
+(BOOL)deleteDB:(id)db;
-(void).cxx_destruct;
-(id)stringValueForPragmaSetting:(id)pragmaSetting;
-(int)intValueForPragmaSetting:(id)pragmaSetting;
-(void)callEventTransactionRollback;
-(id)dbLock;
-(sqlite3*)dbHandle;
-(id)errorWithCode:(int)code Description:(id)description;
-(void)ClearCorruptNum;
-(void)directReportCorrupt:(int)corrupt;
-(void)recordCorrupt:(int)corrupt;
-(BOOL)deleteObjectsFromTable:(id)table where:(const WCDBConditionBase*)where;
-(BOOL)deleteObject:(id)object fromTable:(id)table;
-(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)getConditionStringFromObj:(id)obj;
-(BOOL)updateObject:(id)object onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties ofTable:(id)table where:(const WCDBConditionBase*)where;
-(BOOL)updateObject:(id)object onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties ofTable:(id)table;
-(BOOL)updateProperty:(const WCDBConditionBase*)property withValue:(id)value ofClass:(Class)aClass ofTable:(id)table where:(const WCDBConditionBase*)where;
-(BOOL)insertOrUpdateObjects:(id)objects inToTable:(id)table onConflict:(id)conflict;
-(BOOL)insertOrUpdateObject:(id)object inToTable:(id)table onConflict:(id)conflict;
-(BOOL)insertOrUpdateObjects:(id)objects inToTable:(id)table;
-(BOOL)insertObject:(id)object onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties inToTable:(id)table autoIncrement:(BOOL)increment;
-(BOOL)insertObject:(id)object inToTable:(id)table autoIncrement:(BOOL)increment;
-(BOOL)insertOrUpdateObject:(id)object onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties inToTable:(id)table;
-(BOOL)insertOrUpdateObject:(id)object inToTable:(id)table;
-(BOOL)doInsertObject:(id)object onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties inToTable:(id)table autoIncrement:(BOOL)increment isOrReplace:(BOOL)replace;
-(void)bindBlobProperty:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)property ofObject:(id)object toSTMT:(sqlite3_stmt*)stmt;
-(void)bindBlobProperty:(id)property toSTMT:(sqlite3_stmt*)stmt;
-(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)dumpProperty:(id)property withObject:(id)object;
-(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)dumpProperty:(id)property withValue:(id)value;
-(void)autoIncrementPrimaryKey:(id)key withValue:(long long)value;
-(void)dumpObject:(id)object onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties toNameString:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)nameString andValueString:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)string autoIncrement:(BOOL)increment;
-(void)fillCrossTableFromTableName:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)tableName queryInfo:(id)info;
-(id)itemFromObject:(id)object columnName:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)name;
-(BOOL)fillCrossTableSelectProperty:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)property queryInfo:(id)info columnInfo:(id)info3;
-(BOOL)checkTableQueryInfo:(id)info;
-(id)getObjectsCrossTables:(id)tables where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by limit:(unsigned long)limit getError:(id*)error;
-(id)getSumProperty:(const WCDBConditionBase*)property where:(const WCDBConditionBase*)where ofClass:(Class)aClass fromTable:(id)table;
-(id)getMaxProperty:(const WCDBConditionBase*)property where:(const WCDBConditionBase*)where ofClass:(Class)aClass fromTable:(id)table;
-(id)getMaxProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table;
-(id)getOnePropertyValue:(const WCDBConditionBase*)value ofClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by;
-(id)getPropertyWithDistinct:(const WCDBConditionBase*)distinct ofClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where;
-(id)getProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by limit:(unsigned long)limit;
-(id)getProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where limit:(unsigned long)limit;
-(id)getProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where;
-(id)getProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table;
-(id)getOneProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table withQueryString:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)queryString;
-(id)getProperty:(const WCDBConditionBase*)property ofClass:(Class)aClass fromTable:(id)table withQueryString:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)queryString;
-(unsigned long)getCountOfObjectsOfClass:(Class)aClass fromTable:(id)table withDistinctProperty:(const WCDBConditionBase*)distinctProperty where:(const WCDBConditionBase*)where;
-(unsigned long)getCountOfObjectsOfClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where;
-(id)getObjectsOfClass:(Class)aClass fromTable:(id)table onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by limit:(unsigned long)limit getError:(id*)error;
-(id)getObjectsOfClass:(Class)aClass fromTable:(id)table onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by limit:(unsigned long)limit;
-(id)getObjectsOfClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by limit:(unsigned long)limit;
-(id)getObjectsOfClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where limit:(unsigned long)limit;
-(id)getObjectsOfClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where;
-(id)getAllObjectsOfClass:(Class)aClass fromTable:(id)table;
-(id)getOneObjectOfClass:(Class)aClass fromTable:(id)table onProperties:(const vector<WCDBConditionBase, std::__1::allocator<WCDBConditionBase> >*)properties where:(const WCDBConditionBase*)where orderBy:(const WCDBConditionBase*)by;
-(id)getOneObjectOfClass:(Class)aClass fromTable:(id)table where:(const WCDBConditionBase*)where;
-(id)getLastObjectOfClass:(Class)aClass fromTable:(id)table;
-(id)extractOneProperty:(id)property fromSTMT:(sqlite3_stmt*)stmt atIndex:(int)index;
-(BOOL)extractObjects:(id)objects columnInfo:(id)info fromSTMT:(sqlite3_stmt*)stmt;
-(void)extractOneObject:(id)object fromItem:(id)item index:(int)index STMT:(sqlite3_stmt*)stmt;
-(id)extractOneObjectRepeatedOfClass:(Class)aClass withColumnInfo:(id*)columnInfo STMT:(sqlite3_stmt*)stmt;
-(id)extractOneObjectOfClass:(Class)aClass fromSTMT:(sqlite3_stmt*)stmt;
-(BOOL)excuteSQLNoRet:(const char*)ret errCodePrepare:(int*)prepare errCodeStep:(int*)step;
-(BOOL)excuteSQLNoRet:(const char*)ret;
-(BOOL)rollbackTransaction;
-(BOOL)commitTransaction;
-(BOOL)beginTransaction;
-(id)DBContext;
-(BOOL)createIndexOnTable:(id)table withIndexArray:(const WCDBIndexHelper*)indexArray count:(unsigned long)count;
-(BOOL)createIndexOnTable:(id)table withDummyObj:(id)dummyObj;
-(void)alterTableIfNeeded:(id)needed withProperties:(id)properties;
-(id)getColumnsFromSchema:(id)schema;
-(id)getSchemaOfTable:(id)table;
-(BOOL)isTableExist:(id)exist;
-(BOOL)dropTableOfName:(id)name;
-(BOOL)createTableOfName:(id)name withClass:(Class)aClass;
-(void)generateMultiPrimaryKey:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)key withClass:(Class)aClass;
-(void)generateTableAttribute:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)attribute withClass:(Class)aClass;
-(void)generateTablePrefix:(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)prefix tableName:(id)name withClass:(Class)aClass;
-(id)usingModule:(id)module;
-(id)multiPrimaryKey:(id)key;
-(BOOL)isVirtualTable:(id)table;
-(id)dicTableHelper:(Class)helper;
-(id)getTable:(id)table withClass:(Class)aClass;
-(void)forceClose;
-(void)close;
-(BOOL)isOpen;
-(void)openJournalDeleteMode;
-(void)openJournalWalMode;
-(void)configJournalMode:(BOOL)mode;
-(BOOL)openWithWalMode:(BOOL)walMode;
-(void)dealloc;
-(id)initMemoryOnlyDB;
-(id)initWithPath:(id)path withEncryptKey:(id)encryptKey;
-(id)initWithPath:(id)path withEncryptKey:(id)encryptKey databaseID:(unsigned)anId isWalMode:(BOOL)mode;
-(id)initWithPath:(id)path withEncryptKey:(id)encryptKey databaseID:(unsigned)anId;
-(void)handleEncryptKeyError;
-(BOOL)deleteOneObjectFromFile:(id)file;
-(BOOL)loadOneObjectFromFile:(id)file;
-(BOOL)saveOneObjectToFile:(id)file;
-(id)getPathWithRowID:(const long long*)rowID;
@end


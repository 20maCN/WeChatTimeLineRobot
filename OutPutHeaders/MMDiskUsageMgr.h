/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "MMService.h"
#import "MMService.h"
#import "ReportStrategyExt.h"
#import "MMDiskUsageScannerDelegate.h"
#import "MMDiskUsageRepoterDelegate.h"

@class MMTimer, MMDiskUsageStatus, MMDiskUsageConfigHandler, NSString, MMDiskUsageReporter, NSObject, MMDiskUsageScaner;
@protocol OS_dispatch_queue;

@interface MMDiskUsageMgr : MMService <MMDiskUsageScannerDelegate, MMDiskUsageRepoterDelegate, ReportStrategyExt, MMService> {
	NSObject<OS_dispatch_queue>* m_workQueue;
	MMTimer* m_timerStartScan;
	MMTimer* m_timerStopScan;
	MMDiskUsageScaner* m_scanner;
	MMDiskUsageReporter* m_reporter;
	MMDiskUsageConfigHandler* m_configHandler;
	MMDiskUsageStatus* m_status;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) MMDiskUsageStatus* m_status;
@property(retain, nonatomic) MMDiskUsageConfigHandler* m_configHandler;
@property(retain, nonatomic) MMDiskUsageReporter* m_reporter;
@property(retain, nonatomic) MMDiskUsageScaner* m_scanner;
@property(retain, nonatomic) MMTimer* m_timerStopScan;
@property(retain, nonatomic) MMTimer* m_timerStartScan;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* m_workQueue;
-(void).cxx_destruct;
-(void)onReceiveStrategy:(int)strategy withContene:(id)contene;
-(void)onDiskUsageScanStop;
-(void)onDiskUsageScanStart;
-(void)onTimerStopScan;
-(void)invalidateTimerStopScan;
-(void)scheduleTimerStopScan;
-(void)onTimerStartScan;
-(void)invalidateTimerStartScan;
-(void)scheduleTimerStartScan;
-(id)generateScanConfig;
-(BOOL)isTimeToScan;
-(BOOL)isScanRunning;
-(void)immediateStopScanDisk;
-(void)stopScanDisk;
-(void)startScanDisk;
-(void)scanPhase;
-(void)onReportFinished;
-(void)report;
-(BOOL)isNeedReport;
-(BOOL)isTimeToReport;
-(BOOL)isReporterRunning;
-(void)setupReporter;
-(void)reportPhase;
-(void)saveStatus;
-(void)loadStatus;
-(BOOL)isReadyToRun;
-(void)createWorkQueue;
-(void)ReceiveStrategyConfigXml:(id)xml;
-(void)onServiceTerminate;
-(void)onServiceEnterBackground;
-(void)onServiceEnterForeground;
-(void)onServiceClearData;
-(void)onServiceInit;
-(void)clearReportAndScanData;
-(void)clearData;
-(void)dealloc;
-(id)init;
@end


/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "GTMFetcherAuthorizationProtocol.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableArray, NSURL, NSString, NSMutableDictionary, NSDate, GTMHTTPFetcher, NSDictionary, NSNumber;
@protocol GTMHTTPFetcherServiceProtocol;

@interface GTMOAuth2Authentication : XXUnknownSuperclass <GTMFetcherAuthorizationProtocol> {
	NSString* clientID_;
	NSString* clientSecret_;
	NSString* redirectURI_;
	NSMutableDictionary* parameters_;
	NSURL* tokenURL_;
	NSDate* expirationDate_;
	NSString* authorizationTokenKey_;
	NSDictionary* additionalTokenRequestParameters_;
	NSDictionary* additionalGrantTypeRequestParameters_;
	GTMHTTPFetcher* refreshFetcher_;
	NSMutableArray* authorizationQueue_;
	id<GTMHTTPFetcherServiceProtocol> fetcherService_;
	Class parserClass_;
	BOOL shouldAuthorizeAllRequests_;
	id userData_;
	NSMutableDictionary* properties_;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign) NSString* authorizationToken;
@property(retain) NSMutableArray* authorizationQueue;
@property(retain) GTMHTTPFetcher* refreshFetcher;
@property(copy) NSString* authorizationTokenKey;
@property(assign) Class parserClass;
@property(assign) id<GTMHTTPFetcherServiceProtocol> fetcherService;
@property(retain) NSDictionary* properties;
@property(retain) id userData;
@property(assign) BOOL shouldAuthorizeAllRequests;
@property(readonly, assign) BOOL canAuthorize;
@property(retain) NSString* userEmailIsVerified;
@property(retain) NSString* userEmail;
@property(retain) NSString* userID;
@property(copy) NSString* serviceProvider;
@property(copy) NSDate* expirationDate;
@property(copy) NSURL* tokenURL;
@property(retain) NSString* errorString;
@property(retain) NSString* code;
@property(retain) NSNumber* expiresIn;
@property(retain) NSString* refreshToken;
@property(retain) NSString* accessToken;
@property(retain) NSMutableDictionary* parameters;
@property(retain) NSDictionary* additionalGrantTypeRequestParameters;
@property(retain) NSDictionary* additionalTokenRequestParameters;
@property(retain) NSString* refreshScope;
@property(retain) NSString* assertion;
@property(retain) NSString* tokenType;
@property(retain) NSString* scope;
@property(copy) NSString* redirectURI;
@property(copy) NSString* clientSecret;
@property(copy) NSString* clientID;
+(id)scopeWithStrings:(id)strings;
+(id)dictionaryWithResponseData:(id)responseData;
+(id)dictionaryWithResponseString:(id)responseString;
+(id)unencodedOAuthParameterForString:(id)string;
+(void)invokeDelegate:(id)delegate selector:(SEL)selector object:(id)object object:(id)object4 object:(id)object5;
+(id)encodedQueryParametersForDictionary:(id)dictionary;
+(id)encodedOAuthValueForString:(id)string;
+(id)dictionaryWithJSONData:(id)jsondata;
+(id)authenticationWithServiceProvider:(id)serviceProvider tokenURL:(id)url redirectURI:(id)uri clientID:(id)anId clientSecret:(id)secret;
-(id)propertyForKey:(id)key;
-(void)setProperty:(id)property forKey:(id)key;
-(void)updateExpirationDate;
-(void)reset;
-(BOOL)primeForRefresh;
-(id)persistenceResponseString;
-(void)setKeysForPersistenceResponseString:(id)persistenceResponseString;
-(void)notifyFetchIsRunning:(BOOL)running fetcher:(id)fetcher type:(id)type;
-(void)tokenFetcher:(id)fetcher finishedWithData:(id)data error:(id)error;
-(id)beginTokenFetchWithDelegate:(id)delegate didFinishSelector:(SEL)selector;
-(id)userAgent;
-(void)waitForCompletionWithTimeout:(double)timeout;
-(BOOL)shouldRefreshAccessToken;
-(BOOL)authorizeRequest:(id)request;
-(void)invokeCallbackArgs:(id)args;
-(BOOL)authorizeRequestImmediateArgs:(id)args;
-(void)stopAuthorizationForRequest:(id)request;
-(void)stopAuthorization;
-(BOOL)isAuthorizedRequest:(id)request;
-(BOOL)isAuthorizingRequest:(id)request;
-(void)auth:(id)auth finishedRefreshWithFetcher:(id)fetcher error:(id)error;
-(BOOL)authorizeRequestArgs:(id)args;
-(void)authorizeRequest:(id)request delegate:(id)delegate didFinishSelector:(SEL)selector;
-(void)authorizeRequest:(id)request completionHandler:(id)handler;
-(void)setKeysForResponseJSONData:(id)responseJSONData;
-(void)setKeysForResponseString:(id)responseString;
-(void)setKeysForResponseDictionary:(id)responseDictionary;
-(void)dealloc;
-(id)init;
@end

